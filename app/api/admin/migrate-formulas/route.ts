import { NextRequest, NextResponse } from "next/server"
import { createClient } from '@supabase/supabase-js'
import { calculateSalesRecordWithSettings } from '@/lib/calculations-with-settings'
import { FormulaConfig } from '@/lib/formula-config'

export const runtime = "nodejs"

// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
const DEFAULT_CONFIG: FormulaConfig = {
  financial_load_percent: 5,
  manager_bonus_percent: 3,
  vat_rate: 12,
  kpn_tax_rate: 20,
  client_bonus_tax_rate: 32,
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è Supabase –∫–ª–∏–µ–Ω—Ç–∞
function getSupabaseClient() {
  const supabaseUrl = process.env.NEXT_PUBLIC_SUPABASE_URL
  const supabaseServiceKey = process.env.SUPABASE_SERVICE_ROLE_KEY

  if (!supabaseUrl || !supabaseServiceKey) {
    throw new Error('–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è SUPABASE_URL –∏–ª–∏ SUPABASE_SERVICE_ROLE_KEY')
  }

  return createClient(supabaseUrl, supabaseServiceKey)
}

export async function POST(request: NextRequest) {
  try {
    console.log('üöÄ –ó–∞–ø—É—Å–∫ –º–∏–≥—Ä–∞—Ü–∏–∏ —Ñ–æ—Ä–º—É–ª —á–µ—Ä–µ–∑ API...')
    
    const supabase = getSupabaseClient()
    
    // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∑–∞–ø–∏—Å–∏
    const { data: records, error: fetchError } = await supabase
      .from('sales_records')
      .select('*')
      .order('created_at', { ascending: true })

    if (fetchError) {
      return NextResponse.json(
        { 
          success: false, 
          message: `–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∑–∞–ø–∏—Å–µ–π: ${fetchError.message}` 
        }, 
        { status: 500 }
      )
    }

    if (!records || records.length === 0) {
      return NextResponse.json({
        success: true,
        message: '–ó–∞–ø–∏—Å–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã',
        stats: { total: 0, updated: 0, errors: 0 }
      })
    }

    console.log(`üìã –ù–∞–π–¥–µ–Ω–æ ${records.length} –∑–∞–ø–∏—Å–µ–π –¥–ª—è –º–∏–≥—Ä–∞—Ü–∏–∏`)

    let successCount = 0
    let errorCount = 0
    const errors: string[] = []

    // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∑–∞–ø–∏—Å–∏ –ø–∞–∫–µ—Ç–∞–º–∏ –ø–æ 5 (–º–µ–Ω—å—à–µ –¥–ª—è API)
    const batchSize = 5
    for (let i = 0; i < records.length; i += batchSize) {
      const batch = records.slice(i, i + batchSize)
      console.log(`üîÑ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –ø–∞–∫–µ—Ç ${Math.floor(i / batchSize) + 1}/${Math.ceil(records.length / batchSize)}`)

      const updatePromises = batch.map(async (record) => {
        try {
          // –ü–µ—Ä–µ—Å—á–∏—Ç—ã–≤–∞–µ–º —Å –Ω–æ–≤—ã–º–∏ —Ñ–æ—Ä–º—É–ª–∞–º–∏
          const computed = calculateSalesRecordWithSettings(
            {
              quantity: record.quantity,
              purchase_price: record.purchase_price,
              total_delivery: record.total_delivery,
              selling_with_bonus: record.selling_with_bonus,
              client_bonus: record.client_bonus,
            },
            DEFAULT_CONFIG,
            {} // –ü—É—Å—Ç—ã–µ –∫–∞—Å—Ç–æ–º–Ω—ã–µ —Ñ–æ—Ä–º—É–ª—ã
          )

          // –û–±–Ω–æ–≤–ª—è–µ–º –∑–∞–ø–∏—Å—å –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
          const { error: updateError } = await supabase
            .from('sales_records')
            .update({
              ...computed,
              updated_at: new Date().toISOString(),
            })
            .eq('id', record.id)

          if (updateError) {
            throw new Error(`–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∑–∞–ø–∏—Å–∏ ${record.id}: ${updateError.message}`)
          }

          return { success: true, id: record.id }
        } catch (error) {
          const errorMsg = `–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–ø–∏—Å–∏ ${record.id}: ${error instanceof Error ? error.message : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'}`
          errors.push(errorMsg)
          return { success: false, id: record.id, error: errorMsg }
        }
      })

      const results = await Promise.all(updatePromises)
      
      results.forEach(result => {
        if (result.success) {
          successCount++
        } else {
          errorCount++
        }
      })

      // –ü–∞—É–∑–∞ –º–µ–∂–¥—É –ø–∞–∫–µ—Ç–∞–º–∏
      if (i + batchSize < records.length) {
        await new Promise(resolve => setTimeout(resolve, 200))
      }
    }

    const stats = {
      total: records.length,
      updated: successCount,
      errors: errorCount
    }

    console.log('üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –º–∏–≥—Ä–∞—Ü–∏–∏:', stats)

    return NextResponse.json({
      success: true,
      message: `–ú–∏–≥—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –û–±–Ω–æ–≤–ª–µ–Ω–æ ${successCount} –∏–∑ ${records.length} –∑–∞–ø–∏—Å–µ–π`,
      stats,
      errors: errors.length > 0 ? errors.slice(0, 10) : [] // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤—ã–µ 10 –æ—à–∏–±–æ–∫
    })

  } catch (error) {
    console.error('üí• –û—à–∏–±–∫–∞ –º–∏–≥—Ä–∞—Ü–∏–∏:', error)
    return NextResponse.json(
      { 
        success: false, 
        message: `–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: ${error instanceof Error ? error.message : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'}` 
      }, 
      { status: 500 }
    )
  }
}
