#!/usr/bin/env tsx

import { createClient } from '@supabase/supabase-js'
import { calculateSalesRecordWithSettings } from '../lib/calculations-with-settings'
import { FormulaConfig } from '../lib/formula-config'

// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
const DEFAULT_CONFIG: FormulaConfig = {
  financial_load_percent: 5,
  manager_bonus_percent: 3,
  vat_rate: 12,
  kpn_tax_rate: 20,
  client_bonus_tax_rate: 32,
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Supabase –∫–ª–∏–µ–Ω—Ç–∞
const supabaseUrl = process.env.NEXT_PUBLIC_SUPABASE_URL!
const supabaseServiceKey = process.env.SUPABASE_SERVICE_ROLE_KEY!

if (!supabaseUrl || !supabaseServiceKey) {
  console.error('‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è SUPABASE_URL –∏–ª–∏ SUPABASE_SERVICE_ROLE_KEY')
  process.exit(1)
}

const supabase = createClient(supabaseUrl, supabaseServiceKey)

interface SalesRecord {
  id: string
  quantity: number
  purchase_price: number
  total_delivery: number
  selling_with_bonus: number
  client_bonus: number
  // ... –¥—Ä—É–≥–∏–µ –ø–æ–ª—è
}

async function migrateRecords() {
  console.log('üöÄ –ù–∞—á–∏–Ω–∞–µ–º –º–∏–≥—Ä–∞—Ü–∏—é —Ñ–æ—Ä–º—É–ª...')
  
  try {
    // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∑–∞–ø–∏—Å–∏
    console.log('üìä –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∑–∞–ø–∏—Å–∏ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...')
    const { data: records, error: fetchError } = await supabase
      .from('sales_records')
      .select('*')
      .order('created_at', { ascending: true })

    if (fetchError) {
      throw new Error(`–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∑–∞–ø–∏—Å–µ–π: ${fetchError.message}`)
    }

    if (!records || records.length === 0) {
      console.log('‚ÑπÔ∏è  –ó–∞–ø–∏—Å–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã')
      return
    }

    console.log(`üìã –ù–∞–π–¥–µ–Ω–æ ${records.length} –∑–∞–ø–∏—Å–µ–π –¥–ª—è –º–∏–≥—Ä–∞—Ü–∏–∏`)

    let successCount = 0
    let errorCount = 0
    const errors: string[] = []

    // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∑–∞–ø–∏—Å–∏ –ø–∞–∫–µ—Ç–∞–º–∏ –ø–æ 10
    const batchSize = 10
    for (let i = 0; i < records.length; i += batchSize) {
      const batch = records.slice(i, i + batchSize)
      console.log(`\nüîÑ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –ø–∞–∫–µ—Ç ${Math.floor(i / batchSize) + 1}/${Math.ceil(records.length / batchSize)} (–∑–∞–ø–∏—Å–∏ ${i + 1}-${Math.min(i + batchSize, records.length)})`)

      const updatePromises = batch.map(async (record) => {
        try {
          // –ü–µ—Ä–µ—Å—á–∏—Ç—ã–≤–∞–µ–º —Å –Ω–æ–≤—ã–º–∏ —Ñ–æ—Ä–º—É–ª–∞–º–∏
          const computed = calculateSalesRecordWithSettings(
            {
              quantity: record.quantity,
              purchase_price: record.purchase_price,
              total_delivery: record.total_delivery,
              selling_with_bonus: record.selling_with_bonus,
              client_bonus: record.client_bonus,
            },
            DEFAULT_CONFIG,
            {} // –ü—É—Å—Ç—ã–µ –∫–∞—Å—Ç–æ–º–Ω—ã–µ —Ñ–æ—Ä–º—É–ª—ã
          )

          // –û–±–Ω–æ–≤–ª—è–µ–º –∑–∞–ø–∏—Å—å –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
          const { error: updateError } = await supabase
            .from('sales_records')
            .update({
              ...computed,
              updated_at: new Date().toISOString(),
            })
            .eq('id', record.id)

          if (updateError) {
            throw new Error(`–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∑–∞–ø–∏—Å–∏ ${record.id}: ${updateError.message}`)
          }

          console.log(`‚úÖ –ó–∞–ø–∏—Å—å ${record.id} –æ–±–Ω–æ–≤–ª–µ–Ω–∞`)
          return { success: true, id: record.id }
        } catch (error) {
          const errorMsg = `–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–ø–∏—Å–∏ ${record.id}: ${error instanceof Error ? error.message : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'}`
          console.error(`‚ùå ${errorMsg}`)
          errors.push(errorMsg)
          return { success: false, id: record.id, error: errorMsg }
        }
      })

      const results = await Promise.all(updatePromises)
      
      results.forEach(result => {
        if (result.success) {
          successCount++
        } else {
          errorCount++
        }
      })

      // –ù–µ–±–æ–ª—å—à–∞—è –ø–∞—É–∑–∞ –º–µ–∂–¥—É –ø–∞–∫–µ—Ç–∞–º–∏
      if (i + batchSize < records.length) {
        await new Promise(resolve => setTimeout(resolve, 100))
      }
    }

    console.log('\nüìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –º–∏–≥—Ä–∞—Ü–∏–∏:')
    console.log(`‚úÖ –£—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–æ: ${successCount} –∑–∞–ø–∏—Å–µ–π`)
    console.log(`‚ùå –û—à–∏–±–æ–∫: ${errorCount} –∑–∞–ø–∏—Å–µ–π`)

    if (errors.length > 0) {
      console.log('\n‚ùå –î–µ—Ç–∞–ª–∏ –æ—à–∏–±–æ–∫:')
      errors.forEach((error, index) => {
        console.log(`${index + 1}. ${error}`)
      })
    }

    if (errorCount === 0) {
      console.log('\nüéâ –ú–∏–≥—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!')
    } else {
      console.log('\n‚ö†Ô∏è  –ú–∏–≥—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —Å –æ—à–∏–±–∫–∞–º–∏')
    }

  } catch (error) {
    console.error('üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –º–∏–≥—Ä–∞—Ü–∏–∏:', error)
    process.exit(1)
  }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º –º–∏–≥—Ä–∞—Ü–∏—é
if (require.main === module) {
  migrateRecords()
    .then(() => {
      console.log('üèÅ –°–∫—Ä–∏–ø—Ç –∑–∞–≤–µ—Ä—à–µ–Ω')
      process.exit(0)
    })
    .catch((error) => {
      console.error('üí• –§–∞—Ç–∞–ª—å–Ω–∞—è –æ—à–∏–±–∫–∞:', error)
      process.exit(1)
    })
}

export { migrateRecords }
